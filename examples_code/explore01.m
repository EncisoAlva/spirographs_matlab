% the code for the curve is known to work, this should be the first real
% example
% the sketch of the moon took me some time, as I did it analytically

% designer stuff
MarkerAngle0 = pi;

% technical stuff
MaxDistDelta = 0.001;
CloseTol = 0.001;
MaxSpins = 50;

% specially crafted control points
CtrlPtsArray = {[...
  [-1,0]', ...
  [-1,0]'+(4/3)*(tan(pi/8)/sin(pi/2))*[0,1]',...
  [0,1]'-(4/3)*(tan(pi/8)/sin(pi/2))*[sin(pi/2),cos(pi/2)]',...
  [0,1]'...
  ],[...
  [0,1]', ...
  [0, 1]'-(4/3)*(tan(pi/6)/sin(pi/3))*[sin(pi/3), cos(pi/3)]',...
  [0,-1]'-(4/3)*(tan(pi/6)/sin(pi/3))*[sin(pi/3),-cos(pi/3)]',...
  [0,-1]'...
  ],[...
  [0,-1]', ...
  [0,-1]'-(4/3)*(tan(pi/8)/sin(pi/2))*[sin(pi/2),-cos(pi/2)]',...
  [-1,0]'-(4/3)*(tan(pi/8)/sin(pi/2))*[0,1]',...
  [-1,0]' ...
  ]};

% dumb example
CtrlPtsArray = {...
  [-1,0;-4,4;4,7;3,0]',...
  [3,0; 2,0; 0,0; -1,0]'...
  };

% unit circle
CtrlPtsArray = {[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [(4/3)*tan(pi/8),1]',...
  [1,(4/3)*tan(pi/8)]',...
  [1,0]'...
  ],[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],[
  [0,-1]',...
  [-(4/3)*tan(pi/8),-1]',...
  [-1,-(4/3)*tan(pi/8)]',...
  [-1,0]'
  ]};

for k = 0.5+(1:10)

% specific to this example
WheelRadius  = (BezierPerimeter(CtrlPtsArray,0.00001)/(2*pi))/k;
MarkerRadius = WheelRadius*(1);

% Bezier curve
BezierPos = AllBezierEval( CtrlPtsArray, MaxDistDelta );

% spirograph curve
[Time, WhCtrPos, MarkerPos, MarkerAngle] = ...
  AllBeziers( CtrlPtsArray, WheelRadius, MarkerRadius, MarkerAngle0, ...
    MaxDistDelta, ...
    CloseTol, MaxSpins);

% time, parametrized by the arc of the marker or the ar of the wheel center
TimeFromMarker = zeros(1,size(MarkerPos,2));
TimeFromMarker(2:end) = cumsum( vecnorm( diff(MarkerPos,1,2), 2, 1 ) );

TimeFromWheel = zeros(1,size(WhCtrPos,2));
TimeFromWheel(2:end) = cumsum( vecnorm( diff(WhCtrPos,1,2), 2, 1 ) );

% patch
MarkerPos(:,end+1) = MarkerPos(:,1);
MarkerAngle(end+1) = MarkerAngle(1);

%%
% plot everything
if(true)
figure()
plot(BezierPos(1,:),BezierPos(2,:),'blue')
hold on
%plot(WhCtrPos(1,:),WhCtrPos(2,:),'green')
axis equal
grid on
plot(MarkerPos(1,:),MarkerPos(2,:),'yellow')
title(['k = ',num2str(k)])
saveas(gcf, ['explore_dumb_k',num2str(k),'.png'])
close all
end

end