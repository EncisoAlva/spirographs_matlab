% the code for the curve is known to work, this should be the first real
% example
% the sketch of the moon took me some time, as I did it analytically

%%
% Bezier curves used, I made a small collection so far

% dumb example
%CtrlPtsArray = {...
%  [-1,0;-4,4;4,7;3,0]',...
%  [3,0; 2,0; 0,0; -1,0]'...
%  };

% semicircles S
CtrlPtsArray = {[...
  [0,-1]',...
  [-(8/3)*tan(pi/4)',-1]',...
  [-(8/3)*tan(pi/4)',1]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [-(4/3)*tan(pi/4)',1]',...
  [-(4/3)*tan(pi/4)',0]',...
  [0,0]'...
  ],[...
  [0,0]',...
  [(8/3)*tan(pi/4)',0]',...
  [(8/3)*tan(pi/4)',-2]',...
  [0,-2]'...
  ],[...
  [0,-2]'...
  [(4/3)*tan(pi/4)',-2]',...
  [(4/3)*tan(pi/4)',-1]',...
  [0,-1]'...
  ]};

% specially crafted control points
CtrlPtsArray = {[...
  [-1,0]', ...
  [-1,0]'+(4/3)*(tan(pi/8)/sin(pi/2))*[0,1]',...
  [0,1]'-(4/3)*(tan(pi/8)/sin(pi/2))*[sin(pi/2),cos(pi/2)]',...
  [0,1]'...
  ],[...
  [0,1]', ...
  [0, 1]'-(4/3)*(tan(pi/6)/sin(pi/3))*[sin(pi/3), cos(pi/3)]',...
  [0,-1]'-(4/3)*(tan(pi/6)/sin(pi/3))*[sin(pi/3),-cos(pi/3)]',...
  [0,-1]'...
  ],[...
  [0,-1]', ...
  [0,-1]'-(4/3)*(tan(pi/8)/sin(pi/2))*[sin(pi/2),-cos(pi/2)]',...
  [-1,0]'-(4/3)*(tan(pi/8)/sin(pi/2))*[0,1]',...
  [-1,0]' ...
  ]};

% unit circle
CtrlPtsArray = {[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [1-(4/3)*tan(pi/8),1]',...
  [1,(4/3)*tan(pi/8)]',...
  [1,0]'...
  ],[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],[
  [0,-1]',...
  [-(4/3)*tan(pi/8),-1]',...
  [-1,-(4/3)*tan(pi/8)]',...
  [-1,0]'
  ]};

R = [cos(3*pi/4), -sin(3*pi/4); sin(3*pi/4), cos(3*pi/4)];
% unit circle with inverted stuff
CtrlPtsArray = {R*[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],R*[...
  [0,1]',...
  [0,1-(4/3)*tan(pi/8)]',...
  [1-(4/3)*tan(pi/8),0]',...
  [1,0]'...
  ],R*[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],R*[
  [0,-1]',...
  [0,-1+(4/3)*tan(pi/8)]',...
  [-1+(4/3)*tan(pi/8),0]',...
  [-1,0]'
  ]};

% Rotated square
CtrlPtsArray = {[...
  [-1,0]',...
  [-0.5,0.5]',...
  [-0.5,0.5]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [0.5,0.5]',...
  [0.5,0.5]',...
  [1,0]'...
  ],[...
  [1,0]',...
  [0.5,-0.5]',...
  [0.5,-0.5]',...
  [0,-1]'...
  ],[...
  [0,-1]'...
  [-0.5,-0.5]',...
  [-0.5,-0.5]',...
  [-1,0]'
  ]};

R = [cos(pi/4), -sin(pi/4); sin(pi/4), cos(pi/4)];
% unit circle with inverted stuff
CtrlPtsArray = {R*[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],R*[...
  [0,1]',...
  [0.5,1]',...
  [0.5,1]',...
  [1,1]'...
  ],R*[...
  [1,1]',...
  [1,0.5]',...
  [1,0.5]',...
  [1,0]'...
  ],R*[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],R*[
  [   0,-1]',...
  [-0.5,-1]',...
  [-0.5,-1]',...
  [  -1,-1]',...
  ],R*[...
  [-1,-1]',...
  [-1,-0.5]',...
  [-1,-0.5]',...
  [-1,0]'...
  ]};

% C made from circles
CtrlPtsArray = {[...
  [-3,0]',...
  [-3,0]'+3*[0,(4/3)*tan(pi/8)]',...
  [0,3]'+3*[-(4/3)*tan(pi/8),0]',...
  [0,3]'...
  ],[...
  [0,3]',...
  [0,3]'+[(4/3)*tan(pi/4),0]',...
  [0,1]'+[(4/3)*tan(pi/4),0]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [0,1]'+[-(4/3)*tan(pi/4),0]',...
  [0,-1]'+[-(4/3)*tan(pi/4),0]',...
  [0,-1]'...
  ],[...
  [0,-1]',...
  [0,-1]'+[(4/3)*tan(pi/4),0]',...
  [0,-3]'+[(4/3)*tan(pi/4),0]',...
  [0,-3]'...
  ],[...
  [0,-3]',...
  [0,-3]'+3*[-(4/3)*tan(pi/8),0]',...
  [-3,0]'+3*[0,-(4/3)*tan(pi/8)]',...
  [-3,0]'...
  ]};

% heart
CtrlPtsArray = {[...
  [-2,0]',...
  [-2,(4/3)*tan(pi/4)]',...
  [0,(4/3)*tan(pi/4)]',...
  [0,0]'...
  ],[...
  [0,0]',...
  [0,(4/3)*tan(pi/4)]',...
  [2,(4/3)*tan(pi/4)]',...
  [2,0]',...
  ],[...
  [2,0]',...
  [2,-2*(4/3)*tan(pi/16)]',...
  [2/sqrt(2),-2/sqrt(2)]'+[-1/sqrt(2),-1/sqrt(2)]'*(4/3)*tan(pi/16),...
  [2/sqrt(2),-2/sqrt(2)]'...
  ],[...
  [2/sqrt(2),-2/sqrt(2)]',...
  [2/sqrt(2),-2/sqrt(2)]'+[-.5,-.5]',...
  [0,-4/sqrt(2)]'+[.5,.5]',...
  [0,-4/sqrt(2)]'...
  ],[...
  [0,-4/sqrt(2)]',...
  [0,-4/sqrt(2)]'+[-.5,.5]',...
  [-2/sqrt(2),-2/sqrt(2)]'+[.5,-.5]',...
  [-2/sqrt(2),-2/sqrt(2)]',...
  ],[...
  [-2/sqrt(2),-2/sqrt(2)]'...
  [-2/sqrt(2),-2/sqrt(2)]'+[-1/sqrt(2),1/sqrt(2)]'*(4/3)*tan(pi/16),...
  [-2,-2*(4/3)*tan(pi/16)]',...
  [-2,0]'...
  ]};

if false
  CtrlPtsArray = FlipBezierAll(CtrlPtsArray);
end

%%
% parameters

% technical stuff
MaxDistDelta = 0.001;
CloseTol = 0.001;
MaxSpins = 100;

% designer stuff
MarkerAngle0 = 0;

%% do curves
[WheelRadius, MarkerRadius, BezierPos, ...
  WhCtrPos1A, MarkerPos1A, MarkerAngle1A,...
  WhCtrPos2A, MarkerPos2A, MarkerAngle2A] = ...
  SetupCurves_2pts( CtrlPtsArray, 33/7, 1, MarkerAngle0, ...
    MaxDistDelta, CloseTol, MaxSpins);

[~, ~, ~, ...
  WhCtrPos1B, MarkerPos1B, MarkerAngle1B,...
  WhCtrPos2B, MarkerPos2B, MarkerAngle2B] = ...
  SetupCurves_2pts( FlipBezierAll(CtrlPtsArray), 33/7, 1, MarkerAngle0+pi, ...
    MaxDistDelta, CloseTol, MaxSpins);

WhCtrPos1B    = flip( WhCtrPos1B, 2 );
MarkerPos1B   = flip(MarkerPos1B, 2);
MarkerAngle1B = flip(MarkerAngle1B, 2);
WhCtrPos2B    = flip(WhCtrPos2B, 2);
MarkerPos2B   = flip(MarkerPos2B, 2);
MarkerAngle2B = flip(MarkerAngle2B, 2);

% preview
figure()
fill(BezierPos(1,:),BezierPos(2,:), 'k', 'EdgeColor', 'none'); 
hold on
axis equal
grid on
plot(MarkerPos1A(1,:),MarkerPos1A(2,:),'yellow')
plot(MarkerPos2A(1,:),MarkerPos2A(2,:),'magenta')
plot(MarkerPos1B(1,:),MarkerPos1B(2,:),'yellow')
plot(MarkerPos2B(1,:),MarkerPos2B(2,:),'magenta')

%%
% video parameters
TotalTime = 60;
AfterTime = 5;

VidName = 'doubledouble250913';

%%
% video

close all

TimeFromWheel1A = zeros(1,size(WhCtrPos1A,2));
TimeFromWheel1A(2:end) = cumsum( vecnorm( diff(WhCtrPos1A,1,2), 2, 1 ) );

TimeFromWheel2A = zeros(1,size(WhCtrPos2A,2));
TimeFromWheel2A(2:end) = cumsum( vecnorm( diff(WhCtrPos2A,1,2), 2, 1 ) );

TimeFromWheel1B = zeros(1,size(WhCtrPos1B,2));
TimeFromWheel1B(2:end) = cumsum( vecnorm( diff(WhCtrPos1B,1,2), 2, 1 ) );

TimeFromWheel2B = zeros(1,size(WhCtrPos2B,2));
TimeFromWheel2B(2:end) = cumsum( vecnorm( diff(WhCtrPos2B,1,2), 2, 1 ) );

% duration of video
TimeFromWheel1A = TimeFromWheel1A*((TotalTime-AfterTime)/TimeFromWheel1A(end));
TimeFromWheel2A = TimeFromWheel2A*((TotalTime-AfterTime)/TimeFromWheel2A(end));

TimeFromWheel1B = TimeFromWheel1B*((TotalTime-AfterTime)/TimeFromWheel1B(end));
TimeFromWheel2B = TimeFromWheel2B*((TotalTime-AfterTime)/TimeFromWheel2B(end));

% parameters
fps = 30;
%MaxTime = ceil(TimeFromMarker(end)*fps)/fps;
MaxTime = ceil(TimeFromWheel1A(end)*fps)/fps;
nTimes = MaxTime*fps;

% help
%idxx = 1:size(TimeFromMarker,2);
idxx1A = 1:size(TimeFromWheel1A,2);
idxx2A = 1:size(TimeFromWheel2A,2);
idxx1B = 1:size(TimeFromWheel1B,2);
idxx2B = 1:size(TimeFromWheel2B,2);

aang = 0:(2*pi/ ceil( 2*pi/(MaxDistDelta/WheelRadius) )):(2*pi);
circ = WheelRadius*[cos(aang); sin(aang)];
aux_angles = 0:(pi/3):(2*pi);

% original figure
f1 = figure('Visible','off','Name','Just the curve');
hold on
axis equal
axis off
xlim([min(MarkerPos1A(1,:)) max(MarkerPos1A(1,:))])
ylim([min(MarkerPos1A(2,:)) max(MarkerPos1A(2,:))])
xlim([min(MarkerPos2A(1,:)) max(MarkerPos2A(1,:))])
ylim([min(MarkerPos2A(2,:)) max(MarkerPos2A(2,:))])
%
%fill(BezierPos(1,:),BezierPos(2,:), 'k', 'EdgeColor', 'none'); 
plot(BezierPos(1,:),BezierPos(2,:),'k','LineWidth',2)
%
f2 = figure('Visible','off','Name','With circle');

% video object
v = VideoWriter(strcat(VidName,".mp4"),'MPEG-4');
v.Quality = 100;
open(v)

% main loop
WB = waitbar(0,strcat('Generating video (',VidName,'.mp4)...'), ...
  'Name','Spirograph over Bezier curves by Enciso-Alva (2025)');
for i = 0:nTimes
  % 
  % update progressbar
  waitbar(i/nTimes,WB);
  if getappdata(WB,'canceling')
    disp('Ended by user.')
    close(v);
    delete(WB)
    break
  end
  %
  %CurrPts = idxx(and(TimeFromMarker>=(i-1.1)/fps,TimeFromMarker<=(i+0.1)/fps));
  CurrPts1A = idxx1A(and(TimeFromWheel1A>=(i-1.1)/fps,TimeFromWheel1A<=(i+0.1)/fps));
  CurrPts2A = idxx2A(and(TimeFromWheel2A>=(i-1.1)/fps,TimeFromWheel2A<=(i+0.1)/fps));
  CurrPts1B = idxx1B(and(TimeFromWheel1B>=(i-1.1)/fps,TimeFromWheel1B<=(i+0.1)/fps));
  CurrPts2B = idxx2B(and(TimeFromWheel2B>=(i-1.1)/fps,TimeFromWheel2B<=(i+0.1)/fps));
  if ~( isempty(CurrPts1A) & isempty(CurrPts2A) ) % if no points will be added. skip drawing loop
  %
  % add a few strokes of the marker, then copy to figure 2
  set(0,"CurrentFigure",f1)
  plot(MarkerPos1A(1,CurrPts1A),MarkerPos1A(2,CurrPts1A),'magenta')
  plot(MarkerPos2A(1,CurrPts2A),MarkerPos2A(2,CurrPts2A),'yellow')
  plot(MarkerPos1B(1,CurrPts1B),MarkerPos1B(2,CurrPts1B),'magenta')
  plot(MarkerPos2B(1,CurrPts2B),MarkerPos2B(2,CurrPts2B),'yellow')
  %
  % add only the rotating wheel and the marker point
  clf(f2)
  copyobj(f1.Children,f2)
  set(0,"CurrentFigure",f2)
  %
  j1A = max(CurrPts1A);
  j2A = max(CurrPts2A);
  j1B = max(CurrPts1B);
  j2B = max(CurrPts2B);
  if ~isempty(j1A)
    RefWheelCtrA = WhCtrPos1A(:,j1A);
    RefAngleA = MarkerAngle1A(j1A);
  else
    RefWheelCtrA = WhCtrPos2A(:,j2A);
    RefAngleA = MarkerAngle2A(j2A);
  end
  if ~isempty(j1B)
    RefWheelCtrB = WhCtrPos1B(:,j1B);
    RefAngleB = MarkerAngle1B(j1B);
  else
    RefWheelCtrB = WhCtrPos2B(:,j2B);
    RefAngleB = MarkerAngle2B(j2B);
  end
  fill(RefWheelCtrA(1)+circ(1,:),RefWheelCtrA(2)+circ(2,:), 'b', 'EdgeColor', 'none','FaceAlpha',0.5); 
  fill(RefWheelCtrB(1)+circ(1,:),RefWheelCtrB(2)+circ(2,:), 'b', 'EdgeColor', 'none','FaceAlpha',0.5); 
  for w = 1:size(aux_angles,2)
    plot(RefWheelCtrA(1)+[0,cos(aux_angles(w)+RefAngleA)*WheelRadius],RefWheelCtrA(2)+[0,sin(aux_angles(w)+RefAngleA)*WheelRadius],...
      'Color',[0,0,0,0.5])
    plot(RefWheelCtrB(1)+[0,cos(aux_angles(w)+RefAngleB)*WheelRadius],RefWheelCtrB(2)+[0,sin(aux_angles(w)+RefAngleB)*WheelRadius],...
      'Color',[0,0,0,0.5])
  end
  scatter(MarkerPos1A(1,j1A),MarkerPos1A(2,j1A),10,'magenta','filled')
  scatter(MarkerPos2A(1,j2A),MarkerPos2A(2,j2A),10,'yellow','filled')
  scatter(MarkerPos1B(1,j1B),MarkerPos1B(2,j1B),10,'magenta','filled')
  scatter(MarkerPos2B(1,j2B),MarkerPos2B(2,j2B),10,'yellow','filled')
  %
  end
  writeVideo(v,getframe)
end

if exist('WB','var')
  if getappdata(WB,'canceling')
    return
  end
  delete(WB)
end

% stop for some time after everything is finished
for stopper = 0:(fps*AfterTime)
  writeVideo(v,getframe)
end

% finalize the video object and close the figure
close(v);