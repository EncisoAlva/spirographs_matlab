% the code for the curve is known to work, this should be the first real
% example
% the sketch of the moon took me some time, as I did it analytically

%%
% Bezier curves used, I made a small collection so far

% dumb example
%CtrlPtsArray = {...
%  [-1,0;-4,4;4,7;3,0]',...
%  [3,0; 2,0; 0,0; -1,0]'...
%  };

% semicircles S
CtrlPtsArray = {[...
  [0,-1]',...
  [-(8/3)*tan(pi/4)',-1]',...
  [-(8/3)*tan(pi/4)',1]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [-(4/3)*tan(pi/4)',1]',...
  [-(4/3)*tan(pi/4)',0]',...
  [0,0]'...
  ],[...
  [0,0]',...
  [(8/3)*tan(pi/4)',0]',...
  [(8/3)*tan(pi/4)',-2]',...
  [0,-2]'...
  ],[...
  [0,-2]'...
  [(4/3)*tan(pi/4)',-2]',...
  [(4/3)*tan(pi/4)',-1]',...
  [0,-1]'...
  ]};

% specially crafted control points
CtrlPtsArray = {[...
  [-1,0]', ...
  [-1,0]'+(4/3)*(tan(pi/8)/sin(pi/2))*[0,1]',...
  [0,1]'-(4/3)*(tan(pi/8)/sin(pi/2))*[sin(pi/2),cos(pi/2)]',...
  [0,1]'...
  ],[...
  [0,1]', ...
  [0, 1]'-(4/3)*(tan(pi/6)/sin(pi/3))*[sin(pi/3), cos(pi/3)]',...
  [0,-1]'-(4/3)*(tan(pi/6)/sin(pi/3))*[sin(pi/3),-cos(pi/3)]',...
  [0,-1]'...
  ],[...
  [0,-1]', ...
  [0,-1]'-(4/3)*(tan(pi/8)/sin(pi/2))*[sin(pi/2),-cos(pi/2)]',...
  [-1,0]'-(4/3)*(tan(pi/8)/sin(pi/2))*[0,1]',...
  [-1,0]' ...
  ]};

% unit circle
CtrlPtsArray = {[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [1-(4/3)*tan(pi/8),1]',...
  [1,(4/3)*tan(pi/8)]',...
  [1,0]'...
  ],[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],[
  [0,-1]',...
  [-(4/3)*tan(pi/8),-1]',...
  [-1,-(4/3)*tan(pi/8)]',...
  [-1,0]'
  ]};

R = [cos(3*pi/4), -sin(3*pi/4); sin(3*pi/4), cos(3*pi/4)];
% unit circle with inverted stuff
CtrlPtsArray = {R*[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],R*[...
  [0,1]',...
  [0,1-(4/3)*tan(pi/8)]',...
  [1-(4/3)*tan(pi/8),0]',...
  [1,0]'...
  ],R*[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],R*[
  [0,-1]',...
  [0,-1+(4/3)*tan(pi/8)]',...
  [-1+(4/3)*tan(pi/8),0]',...
  [-1,0]'
  ]};

% Rotated square
CtrlPtsArray = {[...
  [-1,0]',...
  [-0.5,0.5]',...
  [-0.5,0.5]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [0.5,0.5]',...
  [0.5,0.5]',...
  [1,0]'...
  ],[...
  [1,0]',...
  [0.5,-0.5]',...
  [0.5,-0.5]',...
  [0,-1]'...
  ],[...
  [0,-1]'...
  [-0.5,-0.5]',...
  [-0.5,-0.5]',...
  [-1,0]'
  ]};

R = [cos(pi/4), -sin(pi/4); sin(pi/4), cos(pi/4)];
% unit circle with inverted stuff
CtrlPtsArray = {R*[...
  [-1,0]',...
  [-1,(4/3)*tan(pi/8)]',...
  [-(4/3)*tan(pi/8),1]',...
  [0,1]'...
  ],R*[...
  [0,1]',...
  [0.5,1]',...
  [0.5,1]',...
  [1,1]'...
  ],R*[...
  [1,1]',...
  [1,0.5]',...
  [1,0.5]',...
  [1,0]'...
  ],R*[...
  [1,0]',...
  [1,-(4/3)*tan(pi/8)]',...
  [(4/3)*tan(pi/8),-1]',...
  [0,-1]'...
  ],R*[
  [   0,-1]',...
  [-0.5,-1]',...
  [-0.5,-1]',...
  [  -1,-1]',...
  ],R*[...
  [-1,-1]',...
  [-1,-0.5]',...
  [-1,-0.5]',...
  [-1,0]'...
  ]};

% C made from circles
CtrlPtsArray = {[...
  [-3,0]',...
  [-3,0]'+3*[0,(4/3)*tan(pi/8)]',...
  [0,3]'+3*[-(4/3)*tan(pi/8),0]',...
  [0,3]'...
  ],[...
  [0,3]',...
  [0,3]'+[(4/3)*tan(pi/4),0]',...
  [0,1]'+[(4/3)*tan(pi/4),0]',...
  [0,1]'...
  ],[...
  [0,1]',...
  [0,1]'+[-(4/3)*tan(pi/4),0]',...
  [0,-1]'+[-(4/3)*tan(pi/4),0]',...
  [0,-1]'...
  ],[...
  [0,-1]',...
  [0,-1]'+[(4/3)*tan(pi/4),0]',...
  [0,-3]'+[(4/3)*tan(pi/4),0]',...
  [0,-3]'...
  ],[...
  [0,-3]',...
  [0,-3]'+3*[-(4/3)*tan(pi/8),0]',...
  [-3,0]'+3*[0,-(4/3)*tan(pi/8)]',...
  [-3,0]'...
  ]};

% heart
CtrlPtsArray = {[...
  [-2,0]',...
  [-2,(4/3)*tan(pi/4)]',...
  [0,(4/3)*tan(pi/4)]',...
  [0,0]'...
  ],[...
  [0,0]',...
  [0,(4/3)*tan(pi/4)]',...
  [2,(4/3)*tan(pi/4)]',...
  [2,0]',...
  ],[...
  [2,0]',...
  [2,-2*(4/3)*tan(pi/16)]',...
  [2/sqrt(2),-2/sqrt(2)]'+[-1/sqrt(2),-1/sqrt(2)]'*(4/3)*tan(pi/16),...
  [2/sqrt(2),-2/sqrt(2)]'...
  ],[...
  [2/sqrt(2),-2/sqrt(2)]',...
  [2/sqrt(2),-2/sqrt(2)]'+[-.5,-.5]',...
  [0,-4/sqrt(2)]'+[.5,.5]',...
  [0,-4/sqrt(2)]'...
  ],[...
  [0,-4/sqrt(2)]',...
  [0,-4/sqrt(2)]'+[-.5,.5]',...
  [-2/sqrt(2),-2/sqrt(2)]'+[.5,-.5]',...
  [-2/sqrt(2),-2/sqrt(2)]',...
  ],[...
  [-2/sqrt(2),-2/sqrt(2)]'...
  [-2/sqrt(2),-2/sqrt(2)]'+[-1/sqrt(2),1/sqrt(2)]'*(4/3)*tan(pi/16),...
  [-2,-2*(4/3)*tan(pi/16)]',...
  [-2,0]'...
  ]};

if false
  CtrlPtsArray = FlipBezierAll(CtrlPtsArray);
end

%%
% parameters

% technical stuff
MaxDistDelta = 0.001;
CloseTol = 0.001;
MaxSpins = 100;

% designer stuff
MarkerAngle0 = 0;

%% do curves
[WheelRadius, MarkerRadius, BezierPos, ...
  WhCtrPos1, MarkerPos1, MarkerAngle1,...
  WhCtrPos2, MarkerPos2, MarkerAngle2] = ...
  SetupCurves_2pts( CtrlPtsArray, 54/7, 1, MarkerAngle0, ...
    MaxDistDelta, CloseTol, MaxSpins);

% preview
figure()
fill(BezierPos(1,:),BezierPos(2,:), 'k', 'EdgeColor', 'none'); 
hold on
axis equal
grid on
plot(MarkerPos1(1,:),MarkerPos1(2,:),'yellow')
plot(MarkerPos2(1,:),MarkerPos2(2,:),'magenta')

%%
% video

close all
MakeVideo_2pts( WheelRadius, ...
  BezierPos, ...
  WhCtrPos1, MarkerPos1, MarkerAngle1,...
  WhCtrPos2, MarkerPos2, MarkerAngle2,...
  MaxDistDelta,...
  60, 5, 'test_250912_02' )