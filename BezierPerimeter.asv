% Approximate the total perimeter of a shape whose sides are cubic Bezier
% curves. The curves are approximated by a finite number of points, then
% the distance between neighboring points is computed.
%
% ---- INUPUT ------------------------------------------------------------
%  CtrlPtsArray  Array with control points for each one of the Bezier
%                curves that make the curve {?} <- [2,4]'s
%           Tol  Max distance between points of the discretization [1]
%
% ---- OUTPUT ------------------------------------------------------------
%     Perimeter  Approximate perimeter of the shape [2x?]
%
% The last control point of the last curve must be equal to the first
% control point of the first curve. This is not checked.
%
function [Perimeter] = BezierPerimeter( CtrlPtsArray, Tol)

Perimeter = 0;
nCurves   = length(CtrlPtsArray);

% loop
for i = 1:nCurves
  CurrCtrlPts = CtrlPtsArray{i};
  LocalTime   = 0:( 1/ceil(1/Tol) ):1;
  BezierVals  = EvalBezier( CurrCtrlPts, LocalTime );
  DiffCurve   = vecnorm( diff(BezierVals,1,2), 2, 1);
  if max(DiffCurve) < 
  Perimeter   = Perimeter + sum(DiffCurve);
end
end